matrix:
  include:
  - os: linux
    dist: trusty
    sudo: required
language: c++
before_install:
#  - if [ "$TRAVIS_EVENT_TYPE" != "pull_request" ]; then openssl aes-256-cbc -K $encrypted_8d8528292b8b_key -iv $encrypted_8d8528292b8b_iv -in pxscene-build.pem.enc -out /tmp/pxscene-build.pem -d; fi
#  - if [ "$TRAVIS_EVENT_TYPE" != "pull_request" ]; then  eval "$(ssh-agent -s)"; fi
#  - if [ "$TRAVIS_EVENT_TYPE" != "pull_request" ]; then  chmod 0600 /tmp/pxscene-build.pem;  fi
#  - if [ "$TRAVIS_EVENT_TYPE" != "pull_request" ]; then  ssh-add /tmp/pxscene-build.pem;  fi
  - if [ "$TRAVIS_EVENT_TYPE" = "cron" ]; then ./ci/auto_merge_coverity.sh; fi
  - ./ci/before_install.sh
  - if [ "$TRAVIS_EVENT_TYPE" != "cron" ] && {[ "$TRAVIS_EVENT_TYPE" = "push" ] || [ "$TRAVIS_EVENT_TYPE" = "pull_request" ]}; then export PATH=/usr/local/opt/ccache/libexec:$PATH; fi
  - if [ "$TRAVIS_EVENT_TYPE" != "cron" ] && {[ "$TRAVIS_EVENT_TYPE" = "push" ] || [ "$TRAVIS_EVENT_TYPE" = "pull_request" ]}; then echo -n | openssl s_client -connect scan.coverity.com:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | sudo tee -a /etc/ssl/certs/ca-; fi

install:
  - if [ "$TRAVIS_EVENT_TYPE" != "cron" ]; then ./ci/install.sh; fi
before_script:
  - if [ "$TRAVIS_EVENT_TYPE" = "push" ] || [ "$TRAVIS_EVENT_TYPE" = "pull_request" ]; then ccache -s; fi
  - if [ "$TRAVIS_EVENT_TYPE" != "cron" ]; then ./ci/before_script.sh; fi
script:
  - if [ "$TRAVIS_EVENT_TYPE" != "cron" ]; then ./ci/clean_coverity.sh; fi

addons:
  ssh_known_hosts: 96.118.6.151
  coverity_scan:
    project:
      name: "conniefry/pxCore"
      description: "Build submitted via Travis CI"
    notification_email: constance_fry@cable.comcast.com
    build_command_prepend: "echo build prepend"
    build_command:   "./ci/make_coverity.sh"
    branch_pattern: coverity_scan

env:
  global:
   # The next declaration is the encrypted COVERITY_SCAN_TOKEN, created
   #   via the "travis encrypt" command using the project repo's public key
   - secure: "FWuxxK9XtrYktMxvidIrKosR747ZKtATDyh4unkrQI9zKVr7XWRWT8c4Fxfil7tDtimJ3NFZQXG0E8G6kANnMeBpKtvvQhQmq9AUyARMLL+v+Tri+PLwoTvYLtUEuQpjPrMuXwkYC923U8lLy0xBTVOxmo6FO5Fw5cdTJAU3OGuaWzvd9M6G6YTttFzm17GqfdARSkQqu6tPbA/emd9TR4l3IbqBaqI0yd06u6SFjc/VYYxZPhiYoMpPMsQEwF6nCkkgZ5RXyqfYa2/Cqwpf2kT6xVr8sP2+1WzoJRHs2BnY5/jhwBGbpQD4pHeR3dUtewuhh6eZK1PmcDaCgDwbW21tRG60shryC7/ErusHg/qO1p82owedJKTrjRPeFWkKUNoQBzLa4BE++NvzEkTWGCRvDEPXHMrcS+1W+yzPbg0A/XlV+THQRcMfnxKBJ5CbJQvgfE3gzVbenoLh0Opc+N2EizbVFeUsKRx0NgQtY98LsjR6bXZp7XrbTCbTF96AK7klpESAO6/f2vQbHLHfd7FiVOy1hx6P94DIjT1EcdZJEPApvo98ZlXSmpk9vEnyNixwTzqIf9W/JCfEECvi8rpyInJQleS3Njbpcr3QytTiuiO7ddIqMlops7aC9gUIzRoN7tndw/52rwZGJ7b1SYG7auoAe7qfHNi9Wgj1Uzs="

